// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–∞—Ä—Ç—ã
let originalColors = [];
let selectedRegionIndex = null;
let isDragging = false;
let selectedFile = null;
let initialPan = null;
let currentUploadType = 'map'; // 'map' –∏–ª–∏ 'flights'
let regionIdMapping = {}; // –î–æ–±–∞–≤–ª—è–µ–º mapping: { traceIndex: regionId }

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
let allRegions = [];
let currentSuggestions = [];
let selectedSuggestionIndex = -1;
let selectedTraceIndex = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
let allRegionsMetrics = [];
let currentSortColumn = 'name';
let currentSortDirection = 'asc';


/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ –º–µ—Ç—Ä–∏–∫
 */
function initMetricFilter() {
    const metricFilter = document.getElementById('metric-filter');
    if (metricFilter) {
        metricFilter.addEventListener('change', function() {
            updateRegionsTable();
        });
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª
 */
function showSection(sectionName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π
    const targetSection = document.getElementById(sectionName + '-section');
    if (targetSection) {
        targetSection.classList.add('active');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    const activeNavItem = document.querySelector(`[onclick="showSection('${sectionName}')"]`);
    if (activeNavItem) {
        activeNavItem.classList.add('active');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
    localStorage.setItem('currentSection', sectionName);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (sectionName === 'overview') {
        setTimeout(loadOverviewData, 100);
    } else if (sectionName === 'analytics') {
        loadMapIfNeeded();
    }
    history.pushState(null, '', `#${sectionName}`);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
async function loadOverviewData() {
    try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        
        const overviewSection = document.getElementById('overview-section');
        if (!overviewSection || !overviewSection.classList.contains('active')) {
            return;
        }

        showLoadingState();

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        await calculateMetricsAutomatically();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        await loadOverallStats();
        await loadTopRegions();
        await loadAllRegionsMetrics();
        
        hideLoadingState();
        
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        hideLoadingState();
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', 'warning');
    }
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
 */
async function calculateMetricsAutomatically() {
    try {
        console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫...');
        
        const response = await fetch('/calculate_metrics', {
            method: 'POST'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã`);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏:', result.error);
        }
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫:', error);
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingState() {
    const overviewSection = document.getElementById('overview-section');
    if (!overviewSection) return;
    
    let loadingIndicator = document.getElementById('overview-loading');
    if (!loadingIndicator) {
        loadingIndicator = document.createElement('div');
        loadingIndicator.id = 'overview-loading';
        loadingIndicator.className = 'loading-overlay';
        loadingIndicator.innerHTML = `
            <div class="loading-content">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...</p>
            </div>
        `;
        overviewSection.appendChild(loadingIndicator);
    }
    
    loadingIndicator.style.display = 'flex';
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 */
function hideLoadingState() {
    const loadingIndicator = document.getElementById('overview-loading');
    if (loadingIndicator) {
        loadingIndicator.style.display = 'none';
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 */
async function loadOverallStats() {
    try {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const response = await fetch('/metrics/overall');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const stats = await response.json();
        console.log('üìà –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
        updateOverallStats(stats);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        updateOverallStats({
            total_flights: 0,
            avg_duration: 0,
            regions_with_flights: 0,
            total_duration: 0
        });
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateOverallStats(stats) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    updateStatCard('total-flights', stats.total_flights || 0);
    updateStatCard('avg-duration', stats.avg_duration || 0);
    updateStatCard('active-regions', stats.regions_with_flights || 0);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã –¥–ª—è –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const totalHours = Math.round((stats.total_duration || 0) / 60);
    updateStatCard('total-hours', totalHours);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–∞–π–¥–±–∞—Ä–µ
    const miniTotalFlights = document.getElementById('mini-total-flights');
    const miniActiveRegions = document.getElementById('mini-active-regions');
    
    if (miniTotalFlights) {
        miniTotalFlights.textContent = (stats.total_flights || 0).toLocaleString();
    }
    if (miniActiveRegions) {
        miniActiveRegions.textContent = (stats.regions_with_flights || 0).toLocaleString();
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function updateStatCard(cardId, value) {
    const cardElement = document.getElementById(cardId);
    if (!cardElement) {
        console.warn(`‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ —Å ID ${cardId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    let formattedValue = value;
    
    if (cardId === 'total-flights' || cardId === 'active-regions' || cardId === 'total-hours') {
        formattedValue = value.toLocaleString();
    } else if (cardId === 'avg-duration') {
        formattedValue = Math.round(value);
    }
    
    cardElement.textContent = formattedValue;
    console.log(`‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ ${cardId} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${formattedValue}`);
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤
 */
async function loadTopRegions() {
    try {
        console.log('üèÜ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤...');
        const response = await fetch('/metrics/regions');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const regionsData = await response.json();
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-10
        const topFlights = [...regionsData]
            .sort((a, b) => (b.flight_count || 0) - (a.flight_count || 0))
            .slice(0, 10);
            
        const topDuration = [...regionsData]
            .sort((a, b) => (b.avg_duration_minutes || 0) - (a.avg_duration_minutes || 0))
            .slice(0, 10);
        
        updateTopRegionsLists(topFlights, topDuration);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
        updateTopRegionsLists([], []);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏ —Ç–æ–ø —Ä–µ–≥–∏–æ–Ω–æ–≤
 */
function updateTopRegionsLists(topFlights, topDuration) {
    const flightsList = document.getElementById('top-flights-list');
    const durationList = document.getElementById('top-duration-list');
    
    if (flightsList) {
        if (topFlights.length === 0) {
            flightsList.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö</div>';
        } else {
            flightsList.innerHTML = topFlights.map((region, index) => `
                <div class="top-region-item">
                    <div class="region-rank">${index + 1}</div>
                    <div class="region-info">
                        <div class="region-name">${region.region_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω'}</div>
                        <div class="region-value">${(region.flight_count || 0).toLocaleString()} –ø–æ–ª–µ—Ç–æ–≤</div>
                    </div>
                </div>
            `).join('');
        }
    }
    
    if (durationList) {
        if (topDuration.length === 0) {
            durationList.innerHTML = '<div class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</div>';
        } else {
            durationList.innerHTML = topDuration.map((region, index) => `
                <div class="top-region-item">
                    <div class="region-rank">${index + 1}</div>
                    <div class="region-info">
                        <div class="region-name">${region.region_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω'}</div>
                        <div class="region-value">${Math.round(region.avg_duration_minutes || 0)} –º–∏–Ω</div>
                    </div>
                </div>
            `).join('');
        }
    }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
 */
async function loadAllRegionsMetrics() {
    try {
        console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤...');
        
        const tableBody = document.getElementById('regions-table-body');
        const tableContainer = document.querySelector('.regions-table-container');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if (tableContainer) {
            tableContainer.classList.add('loading');
        }
        if (tableBody) {
            tableBody.innerHTML = '';
        }

        const response = await fetch('/metrics/regions');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const regionsMetrics = await response.json();
        console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤:', regionsMetrics.length);
        
        allRegionsMetrics = regionsMetrics;
        updateRegionsTable();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
        allRegionsMetrics = [];
        updateRegionsTable();
    } finally {
        const tableContainer = document.querySelector('.regions-table-container');
        if (tableContainer) {
            tableContainer.classList.remove('loading');
        }
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 */
function updateRegionsTable() {
    const tableBody = document.getElementById('regions-table-body');
    const metricFilter = document.getElementById('metric-filter');
    const tableHead = document.querySelector('.regions-table thead tr');
    
    if (!tableBody || !metricFilter || !tableHead) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    const currentFilter = metricFilter.value;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    if (currentFilter === 'all') {
        tableHead.innerHTML = `
            <th class="sortable" onclick="sortTable('name')">–†–µ–≥–∏–æ–Ω <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('flight_count')">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('avg_duration_minutes')">–°—Ä. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('total_duration_minutes')">–û–±—â–µ–µ –≤—Ä–µ–º—è <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('flight_density')">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤ <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('avg_daily_flights')">–°—Ä. –ø–æ–ª–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('peak_load_per_hour')">–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ <span class="sort-indicator">‚Üï</span></th>
        `;
        renderAllMetricsTable(tableBody);
    } else {
        tableHead.innerHTML = `
            <th class="sortable" onclick="sortTable('name')">–†–µ–≥–∏–æ–Ω <span class="sort-indicator">‚Üï</span></th>
            <th class="sortable" onclick="sortTable('${currentFilter}')">${getMetricLabel(currentFilter)} <span class="sort-indicator">‚Üï</span></th>
        `;
        renderSingleMetricTable(tableBody, currentFilter);
    }
    
    updateSortIndicators();
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */
function renderAllMetricsTable(tableBody) {
    if (allRegionsMetrics.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö</td>
            </tr>
        `;
        return;
    }

    const sortedRegions = sortRegions(allRegionsMetrics, currentSortColumn, currentSortDirection);

    tableBody.innerHTML = sortedRegions.map(region => {
        const flightCount = region.flight_count || 0;
        const avgDuration = Math.round(region.avg_duration_minutes || 0);
        const flightDensity = (region.flight_density || 0).toFixed(4);
        const totalHours = Math.round((region.total_duration_minutes || 0) / 60);
        const avgDaily = (region.avg_daily_flights || 0).toFixed(1);
        const peakLoad = region.peak_load_per_hour || 0;

        return `
            <tr>
                <td>${region.region_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω'}</td>
                <td class="metric-value flights">${flightCount.toLocaleString()}</td>
                <td class="metric-value duration">${avgDuration} –º–∏–Ω</td>
                <td class="metric-value hours">${totalHours} —á</td>
                <td class="metric-value density">${flightDensity}</td>
                <td class="metric-value daily">${avgDaily}</td>
                <td class="metric-value peak">${peakLoad}</td>
            </tr>
        `;
    }).join('');
    
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${sortedRegions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
}

/**
 * –†–µ–Ω–¥–µ—Ä–∏—Ç —Ç–∞–±–ª–∏—Ü—É —Å –æ–¥–Ω–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç—Ä–∏–∫–æ–π
 */
function renderSingleMetricTable(tableBody, metric) {
    if (allRegionsMetrics.length === 0) {
        tableBody.innerHTML = `
            <tr>
                <td colspan="2" class="no-data">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–≥–∏–æ–Ω–∞—Ö</td>
            </tr>
        `;
        return;
    }

    const sortedRegions = sortRegions(allRegionsMetrics, currentSortColumn, currentSortDirection);

    tableBody.innerHTML = sortedRegions.map(region => {
        const metricValue = getFormattedMetricValue(region, metric);
        const metricClass = getMetricClass(metric);

        return `
            <tr>
                <td>${region.region_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω'}</td>
                <td class="metric-value ${metricClass}">${metricValue}</td>
            </tr>
        `;
    }).join('');
    
    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–æ–π "${getMetricLabel(metric)}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${sortedRegions.length} —Ä–µ–≥–∏–æ–Ω–æ–≤`);
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É
 */
function sortRegions(regions, column, direction) {
    const sortedRegions = [...regions].sort((a, b) => {
        let valueA, valueB;
        
        if (column === 'name') {
            valueA = a.region_name || '';
            valueB = b.region_name || '';
            return direction === 'asc' ? 
                valueA.localeCompare(valueB) : 
                valueB.localeCompare(valueA);
        } else {
            valueA = a[column] || 0;
            valueB = b[column] || 0;
            return direction === 'asc' ? valueA - valueB : valueB - valueA;
        }
    });
    
    return sortedRegions;
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–æ–ª–±—Ü—É
 */
function sortTable(column) {
    if (currentSortColumn === column) {
        // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –µ—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ —Ç–æ–π –∂–µ –∫–æ–ª–æ–Ω–∫–µ
        currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
    } else {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        currentSortColumn = column;
        currentSortDirection = 'desc';
    }
    
    updateRegionsTable();
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã
 */
function updateSortIndicators() {
    const sortIndicators = document.querySelectorAll('.sort-indicator');
    sortIndicators.forEach(indicator => {
        indicator.textContent = '‚Üï';
    });
    
    const currentHeader = document.querySelector(`th[onclick="sortTable('${currentSortColumn}')"] .sort-indicator`);
    if (currentHeader) {
        currentHeader.textContent = currentSortDirection === 'asc' ? '‚Üë' : '‚Üì';
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
 */
function getMetricField(metric) {
    const fieldMap = {
        'flight_count': 'flight_count',
        'avg_duration_minutes': 'avg_duration_minutes',
        'total_duration_minutes': 'total_duration_minutes',
        'avg_daily_flights': 'avg_daily_flights',
        'flight_density': 'flight_density',
        'peak_load_per_hour': 'peak_load_per_hour'
    };
    return fieldMap[metric] || 'flight_count';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function getFormattedMetricValue(region, metric) {
    const value = region[getMetricField(metric)] || 0;
    
    switch (metric) {
        case 'flight_count':
            return value.toLocaleString();
        case 'avg_duration_minutes':
            return Math.round(value) + ' –º–∏–Ω';
        case 'total_duration_minutes':
            return Math.round(value / 60) + ' —á';
        case 'avg_daily_flights':
            return Number(value).toFixed(1);
        case 'flight_density':
            return Number(value).toFixed(4);
        case 'peak_load_per_hour':
            return value;
        default:
            return value;
    }
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫–∏
 */
function getMetricClass(metric) {
    const classMap = {
        'flight_count': 'flights',
        'avg_duration_minutes': 'duration',
        'total_duration_minutes': 'hours',
        'avg_daily_flights': 'daily',
        'flight_density': 'density',
        'peak_load_per_hour': 'peak'
    };
    return classMap[metric] || 'flights';
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
 */
function getMetricLabel(metric) {
    const labelMap = {
        'flight_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤',
        'avg_duration_minutes': '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'total_duration_minutes': '–û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ–ª–µ—Ç–æ–≤',
        'avg_daily_flights': '–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –¥–µ–Ω—å',
        'flight_density': '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤',
        'peak_load_per_hour': '–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞'
    };
    return labelMap[metric] || '–ú–µ—Ç—Ä–∏–∫–∞';
}



/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
function initSearch() {
    const searchInput = document.getElementById('regionSearch');
    const searchClear = document.getElementById('searchClear');
    const searchSuggestions = document.getElementById('searchSuggestions');

    if (!searchInput || !searchClear || !searchSuggestions) {
        console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    loadAllRegions();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    searchInput.addEventListener('input', function(e) {
        const query = e.target.value.trim();
        
        if (query.length === 0) {
            hideSuggestions();
            searchClear.style.display = 'none';
            return;
        }
        
        searchClear.style.display = 'flex';
        showSuggestions(query);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    searchInput.addEventListener('keydown', function(e) {
        switch(e.key) {
            case 'ArrowDown':
                e.preventDefault();
                navigateSuggestions(1);
                break;
            case 'ArrowUp':
                e.preventDefault();
                navigateSuggestions(-1);
                break;
            case 'Enter':
                e.preventDefault();
                selectCurrentSuggestion();
                break;
            case 'Escape':
                hideSuggestions();
                break;
        }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    searchClear.addEventListener('click', function() {
        searchInput.value = '';
        searchClear.style.display = 'none';
        hideSuggestions();
        searchInput.focus();
        resetRegionSelection();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.search-container')) {
            hideSuggestions();
        }
    });

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    searchInput.addEventListener('focus', function() {
        if (this.value.trim().length > 0) {
            showSuggestions(this.value.trim());
        }
    });
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function loadAllRegions() {
    try {
        const response = await fetch('/debug/regions');
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤');
        }
        
        const data = await response.json();
        allRegions = data.database_regions || [];
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', allRegions.length);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
        // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç—ã
        extractRegionsFromMap();
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ —Ç–µ–∫—É—â–µ–π –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
 */
function extractRegionsFromMap() {
    const mapElement = document.getElementById('map');
    if (!mapElement) return;
    
    const traces = mapElement._fullData;
    
    if (traces && traces.length > 0) {
        allRegions = traces.map((trace, index) => ({
            id: regionIdMapping[index] || index,
            name: trace.name || `–†–µ–≥–∏–æ–Ω ${index + 1}`,
            type: 'region'
        }));
        console.log('‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –∫–∞—Ä—Ç—ã:', allRegions.length);
    } else {
        allRegions = [];
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–µ–≥–∏–æ–Ω—ã –∏–∑ –∫–∞—Ä—Ç—ã');
    }
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
function showSuggestions(query) {
    if (allRegions.length === 0) {
        showLoadingSuggestions();
        return;
    }

    const normalizedQuery = query.toLowerCase().trim();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
    currentSuggestions = allRegions.filter(region => 
        region.name && region.name.toLowerCase().includes(normalizedQuery)
    ).slice(0, 10); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏

    displaySuggestions(currentSuggestions);
    selectedSuggestionIndex = -1;
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
 */
function showLoadingSuggestions() {
    const searchSuggestions = document.getElementById('searchSuggestions');
    if (!searchSuggestions) return;
    
    searchSuggestions.innerHTML = `
        <div class="search-loading">
            <i class="fas fa-spinner"></i>
            –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...
        </div>
    `;
    searchSuggestions.style.display = 'block';
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
 */
function displaySuggestions(suggestions) {
    const searchSuggestions = document.getElementById('searchSuggestions');
    if (!searchSuggestions) return;
    
    if (suggestions.length === 0) {
        searchSuggestions.innerHTML = `
            <div class="search-suggestion">
                <i class="fas fa-search"></i>
                <span>–†–µ–≥–∏–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</span>
            </div>
        `;
    } else {
        searchSuggestions.innerHTML = suggestions.map((region, index) => `
            <div class="search-suggestion ${index === selectedSuggestionIndex ? 'active' : ''}" 
                 data-region-id="${region.id}" 
                 data-region-name="${region.name}">
                <i class="fas fa-map-marker-alt"></i>
                <span class="region-name">${region.name}</span>
                <span class="region-type">—Ä–µ–≥–∏–æ–Ω</span>
            </div>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        searchSuggestions.querySelectorAll('.search-suggestion').forEach((suggestion, index) => {
            suggestion.addEventListener('click', () => {
                selectSuggestion(suggestions[index]);
            });
        });
    }
    
    searchSuggestions.style.display = 'block';
}

/**
 * –°–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
 */
function hideSuggestions() {
    const searchSuggestions = document.getElementById('searchSuggestions');
    if (searchSuggestions) {
        searchSuggestions.style.display = 'none';
    }
    selectedSuggestionIndex = -1;
}

/**
 * –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏—à
 */
function navigateSuggestions(direction) {
    if (currentSuggestions.length === 0) return;
    
    selectedSuggestionIndex += direction;
    
    if (selectedSuggestionIndex < 0) {
        selectedSuggestionIndex = currentSuggestions.length - 1;
    } else if (selectedSuggestionIndex >= currentSuggestions.length) {
        selectedSuggestionIndex = 0;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    displaySuggestions(currentSuggestions);
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    const selectedElement = document.querySelector(`.search-suggestion:nth-child(${selectedSuggestionIndex + 1})`);
    if (selectedElement) {
        selectedElement.scrollIntoView({ block: 'nearest' });
    }
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter)
 */
function selectCurrentSuggestion() {
    if (selectedSuggestionIndex >= 0 && currentSuggestions[selectedSuggestionIndex]) {
        selectSuggestion(currentSuggestions[selectedSuggestionIndex]);
    } else if (currentSuggestions.length > 0) {
        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
        selectSuggestion(currentSuggestions[0]);
    }
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –∏–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏
 */
function selectSuggestion(region) {
    const searchInput = document.getElementById('regionSearch');
    if (searchInput) {
        searchInput.value = region.name;
    }
    hideSuggestions();
    
    // –í—ã–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ
    selectRegionOnMap(region.id, region.name);
}

/**
 * –í—ã–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ ID (–¥–ª—è –ø–æ–∏—Å–∫–∞)
 */
function selectRegionOnMap(regionId, regionName) {
    // –ù–∞—Ö–æ–¥–∏–º traceIndex –ø–æ regionId
    let traceIndex = null;
    for (const [traceIdx, regId] of Object.entries(regionIdMapping)) {
        if (regId === regionId) {
            traceIndex = parseInt(traceIdx);
            break;
        }
    }
    
    if (traceIndex === null) {
        showNotification(`–†–µ–≥–∏–æ–Ω "${regionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ`, 'warning');
        return;
    }
    
    // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (selectedTraceIndex === traceIndex) {
        resetRegionSelection();
    } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è
        highlightRegionOnMap(traceIndex, regionId, regionName);
    }
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–∞—Ä—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const mapWrapper = document.querySelector('.map-wrapper');
    if (mapWrapper) {
        mapWrapper.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center' 
        });
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
function openUploadModal() {
    console.log('üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã...');
    const modal = document.getElementById('uploadModal');
    if (modal) {
        modal.style.display = 'block';
        modal.classList.add('active');
        resetUploadState();
        currentUploadType = 'map';

        // üî• –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É:
        setTimeout(() => {
            initFileUpload();
        }, 50); // –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —Ç–æ—á–Ω–æ –æ–±–Ω–æ–≤–∏–ª—Å—è

        console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –æ—Ç–∫—Ä—ã—Ç–æ');
    } else {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ uploadModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }
}

function closeUploadModal() {
    const modal = document.getElementById('uploadModal');
    if (modal) {
        modal.style.display = 'none';
        modal.classList.remove('active');
    }
    resetUploadState();
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç–æ');
}

function openFlightsUploadModal() {
    console.log('üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤...');
    
    const modal = document.getElementById('flightsUploadModal');
    if (!modal) {
        console.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ flightsUploadModal –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
    }
    
    modal.style.display = 'block';
    modal.classList.add('active');
    resetFlightsUploadState();
    currentUploadType = 'flights';
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setTimeout(() => {
        initFlightsFileUpload();
    }, 100);
    
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ');
}

function closeFlightsUploadModal() {
    const modal = document.getElementById('flightsUploadModal');
    if (modal) {
        modal.style.display = 'none';
        modal.classList.remove('active');
    }
    resetFlightsUploadState();
    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ');
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
document.addEventListener('click', function(event) {
    const uploadModal = document.getElementById('uploadModal');
    const flightsModal = document.getElementById('flightsUploadModal');
    
    if (event.target === uploadModal) {
        closeUploadModal();
    }
    if (event.target === flightsModal) {
        closeFlightsUploadModal();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
document.addEventListener('keydown', function(event) {
    if (event.key === 'Escape') {
        closeUploadModal();
        closeFlightsUploadModal();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButtons = document.querySelectorAll('.close');
    closeButtons.forEach(button => {
        button.addEventListener('click', function() {
            const modal = this.closest('.modal');
            if (modal && modal.id === 'uploadModal') {
                closeUploadModal();
            } else if (modal && modal.id === 'flightsUploadModal') {
                closeFlightsUploadModal();
            }
        });
    });
});

// –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
function resetUploadState() {
    const fileInput = document.getElementById('fileInput');
    const fileInfo = document.getElementById('fileInfo');
    const progressBar = document.getElementById('progressBar');
    const uploadStatus = document.getElementById('uploadStatus');
    const uploadBtn = document.getElementById('uploadBtn');
    
    if (fileInput) fileInput.value = '';
    if (fileInfo) fileInfo.style.display = 'none';
    if (progressBar) progressBar.style.display = 'none';
    if (uploadStatus) {
        uploadStatus.textContent = '';
        uploadStatus.className = 'upload-status';
    }
    if (uploadBtn) uploadBtn.disabled = true;
    selectedFile = null;
}


function resetFlightsUploadState() {
    const fileInput = document.getElementById('flightsFileInput');
    const fileInfo = document.getElementById('flightsFileInfo');
    const progressBar = document.getElementById('flightsProgressBar');
    const uploadStatus = document.getElementById('flightsUploadStatus');
    const uploadBtn = document.getElementById('flightsUploadBtn');
    
    if (fileInput) fileInput.value = '';
    if (fileInfo) fileInfo.style.display = 'none';
    if (progressBar) progressBar.style.display = 'none';
    if (uploadStatus) {
        uploadStatus.textContent = '';
        uploadStatus.className = 'upload-status';
    }
    if (uploadBtn) uploadBtn.disabled = true;
    selectedFile = null;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è drag & drop –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function initFileUpload() {
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');

    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã...');

    if (!dropZone || !fileInput) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
            dropZone: !!dropZone,
            fileInput: !!fileInput
        });
        return;
    }

    function preventDefaults(e) {
        e.preventDefault();
    }

    function highlight() {
        dropZone.classList.add('dragover');
        console.log('üéØ DropZone –ø–æ–¥—Å–≤–µ—á–µ–Ω');
    }

    function unhighlight() {
        dropZone.classList.remove('dragover');
        console.log('üéØ DropZone —Å–Ω—è—Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
    });

    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ drop
    dropZone.addEventListener('drop', function(e) {
        console.log('üìÇ Drop —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFiles(files);
    }, false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ dropZone - –ü–†–û–°–¢–û–ô –ò –ü–†–Ø–ú–û–ô
    dropZone.addEventListener('click', function(e) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ DropZone');
        e.preventDefault();
        fileInput.click(); // –ë–µ–∑ stopPropagation!
    }, false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ input
    fileInput.addEventListener('change', function(e) {
        console.log('üìù FileInput –∏–∑–º–µ–Ω–µ–Ω, —Ñ–∞–π–ª–æ–≤:', e.target.files.length);
        const files = e.target.files;
        handleFiles(files);
    }, false);

    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤
 */
function initFlightsFileUpload() {
    const dropZone = document.getElementById('flightsDropZone');
    const fileInput = document.getElementById('flightsFileInput');

    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤...');

    if (!dropZone || !fileInput) {
        console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤:', {
            dropZone: !!dropZone,
            fileInput: !!fileInput
        });
        return;
    }

    function preventDefaults(e) {
        e.preventDefault();

    }

    function highlight() {
        dropZone.classList.add('dragover');
        console.log('üéØ Flights DropZone –ø–æ–¥—Å–≤–µ—á–µ–Ω');
    }

    function unhighlight() {
        dropZone.classList.remove('dragover');
        console.log('üéØ Flights DropZone —Å–Ω—è—Ç–æ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π drag and drop
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
    });

    ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ drop
    dropZone.addEventListener('drop', function(e) {
        console.log('üìÇ Flights Drop —Å–æ–±—ã—Ç–∏–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
        const dt = e.dataTransfer;
        const files = dt.files;
        handleFlightsFiles(files);
    }, false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ dropZone - –ü–†–û–°–¢–û–ô –ò –ü–†–Ø–ú–û–ô
    dropZone.addEventListener('click', function(e) {
        console.log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ Flights DropZone');
        e.preventDefault();
        fileInput.click();
    }, false);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ input
    fileInput.addEventListener('change', function(e) {
        console.log('üìù Flights FileInput –∏–∑–º–µ–Ω–µ–Ω, —Ñ–∞–π–ª–æ–≤:', e.target.files.length);
        const files = e.target.files;
        handleFlightsFiles(files);
    }, false);

    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
}

function handleFileSelect(e) {
    handleFiles(e.target.files);
}

function handleFiles(files) {
    if (!files || files.length === 0) return;
    const file = files[0];
    
    console.log('üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞:', file.name);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (!validateFileSize(file)) {
        return;
    }
    
    const fileName = file.name.toLowerCase();
    
    let isSupported = false;
    let errorMessage = '';
    
    if (currentUploadType === 'flights') {
        isSupported = fileName.endsWith('.xlsx') || fileName.endsWith('.xls');
        errorMessage = '–î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã';
    } else {
        const supportedFormats = ['.geojson', '.json', '.shp', '.shx', '.dbf', '.prj', '.zip'];
        isSupported = supportedFormats.some(format => fileName.endsWith(format));
        errorMessage = '–î–ª—è –∫–∞—Ä—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .geojson, .json, .shp –∏ .zip —Ñ–∞–π–ª—ã';
    }
    
    if (!isSupported) {
        console.warn('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', fileName);
        showNotification(errorMessage, 'warning');
        return;
    }
    
    selectedFile = file;
    updateFileInfo(file);
    
    const uploadBtn = currentUploadType === 'flights' ? 
        document.getElementById('flightsUploadBtn') : 
        document.getElementById('uploadBtn');
    
    if (uploadBtn) {
        uploadBtn.disabled = false;
    }
    
    console.log('‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ:', file.name);
}

function handleFlightsFiles(files) {
    console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª–µ—Ç–æ–≤...', files);
    
    if (!files || files.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        return;
    }
    
    const file = files[0];
    console.log('üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', file.name);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (!validateFileSize(file)) {
        return;
    }
    
    const fileName = file.name.toLowerCase();
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞:', fileName);
    
    const isSupported = fileName.endsWith('.xlsx') || fileName.endsWith('.xls');
    
    if (!isSupported) {
        console.warn('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª–µ—Ç–æ–≤:', fileName);
        showNotification('–î–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .xlsx –∏ .xls —Ñ–∞–π–ª—ã', 'warning');
        return;
    }
    
    selectedFile = file;
    console.log('‚úÖ –§–∞–π–ª –ø—Ä–∏–Ω—è—Ç:', file.name);
    
    updateFlightsFileInfo(file);
    
    const uploadBtn = document.getElementById('flightsUploadBtn');
    if (uploadBtn) {
        uploadBtn.disabled = false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
function updateFileInfo(file) {
    const fileInfo = document.getElementById('fileInfo');
    const fileName = document.getElementById('fileName');
    const fileSize = document.getElementById('fileSize');
    const fileType = document.getElementById('fileType');
    
    if (!fileInfo || !fileName || !fileSize || !fileType) return;
    
    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);
    
    const fileExt = file.name.toLowerCase().split('.').pop();
    let typeName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
    
    switch(fileExt) {
        case 'geojson':
        case 'json':
            typeName = 'GeoJSON';
            break;
        case 'shp':
            typeName = 'Shapefile';
            break;
        case 'zip':
            typeName = 'ZIP –∞—Ä—Ö–∏–≤ (Shapefile)';
            break;
        default:
            typeName = file.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
    
    fileType.textContent = typeName;
    fileInfo.style.display = 'block';
}

function updateFlightsFileInfo(file) {
    const fileInfo = document.getElementById('flightsFileInfo');
    const fileName = document.getElementById('flightsFileName');
    const fileSize = document.getElementById('flightsFileSize');
    const fileType = document.getElementById('flightsFileType');
    
    if (!fileInfo || !fileName || !fileSize || !fileType) return;
    
    fileName.textContent = file.name;
    fileSize.textContent = formatFileSize(file.size);
    
    const fileExt = file.name.toLowerCase().split('.').pop();
    let typeName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç';
    
    switch(fileExt) {
        case 'xlsx':
            typeName = 'Excel –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ—Ç–∞—Ö';
            break;
        case 'xls':
            typeName = 'Excel –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ—Ç–∞—Ö (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)';
            break;
        default:
            typeName = file.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    }
    
    fileType.textContent = typeName;
    fileInfo.style.display = 'block';
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
async function uploadFile() {
    if (!selectedFile) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'warning');
        return;
    }

    console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', selectedFile.name);
    
    const formData = new FormData();
    formData.append("file", selectedFile);

    const progressBar = document.getElementById('progressBar');
    const progress = document.getElementById('progress');
    const uploadStatus = document.getElementById('uploadStatus');

    if (progressBar) progressBar.classList.add('show');
    if (progress) progress.style.width = '10%';
    if (uploadStatus) {
        uploadStatus.textContent = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...';
        uploadStatus.className = 'upload-status';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    const endpoint = currentUploadType === 'flights' ? '/process_flights' : '/process';

    console.log(`üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: ${endpoint}`);

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 300000); // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

        if (progress) progress.style.width = '30%';
        if (uploadStatus) uploadStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...';

        const response = await fetch(endpoint, {
            method: 'POST',
            body: formData,
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

        if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.detail || errorData.error || errorMessage;
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—à–∏–±–∫–∏:', e);
            }
            throw new Error(errorMessage);
        }

        if (progress) progress.style.width = '70%';
        if (uploadStatus) uploadStatus.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...';

        const result = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', result);

        if (progress) progress.style.width = '100%';
        
        if (currentUploadType === 'map') {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã
            if (uploadStatus) {
                uploadStatus.textContent = '–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!';
                uploadStatus.className = 'upload-status success';
            }
            
            const fileInfo = result.file_info;
            let successMessage = '–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞';
            
            if (fileInfo && fileInfo.database_updated) {
                successMessage += ' –∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';
            }
            
            showNotification(successMessage, 'success');
            
            setTimeout(() => closeUploadModal(), 1000);
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å result
            console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∫–∞—Ä—Ç—ã...');
            renderMap(result);
            
        } else {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö
            if (uploadStatus) {
                uploadStatus.textContent = '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!';
                uploadStatus.className = 'upload-status success';
            }
            
            const fileInfo = result.file_info;
            let successMessage = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${fileInfo?.flights_count || 0} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª–µ—Ç–∞—Ö`;
            
            if (fileInfo?.database_updated) {
                successMessage += ' –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';
            }
            
            showNotification(successMessage, 'success');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if (result.statistics) {
                console.log('üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', result.statistics);
                showFlightStatistics(result.statistics, result.summary);
            }
            
            setTimeout(() => closeFlightsUploadModal(), 2000);
        }
        
        if (result.statistics) {
            updateStatsAfterFlightUpload(result.statistics);
        }

    } catch (err) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
        
        if (progress) progress.style.width = '100%';
        
        if (err.name === 'AbortError') {
            if (uploadStatus) {
                uploadStatus.textContent = '–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)';
            }
            showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 5 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞.', 'warning');
        } else {
            if (uploadStatus) {
                uploadStatus.textContent = '–û—à–∏–±–∫–∞: ' + err.message;
            }
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ' + err.message, 'warning');
        }
        
        if (uploadStatus) {
            uploadStatus.className = 'upload-status error';
        }
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤
 */
async function uploadFlightsFile() {
    if (!selectedFile) {
        showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª', 'warning');
        return;
    }

    console.log('üöÄ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–µ—Ç–∞–º–∏:', selectedFile.name);
    
    const formData = new FormData();
    formData.append("file", selectedFile);

    const progressBar = document.getElementById('flightsProgressBar');
    const progress = document.getElementById('flightsProgress');
    const uploadStatus = document.getElementById('flightsUploadStatus');

    if (progressBar) progressBar.classList.add('show');
    if (progress) progress.style.width = '10%';
    if (uploadStatus) {
        uploadStatus.textContent = '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...';
        uploadStatus.className = 'upload-status';
    }

    console.log('üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞: /process_flights');

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 300000); // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç

        if (progress) progress.style.width = '30%';
        if (uploadStatus) uploadStatus.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...';

        const response = await fetch('/process_flights', {
            method: 'POST',
            body: formData,
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

        if (!response.ok) {
            let errorMessage = `HTTP error! status: ${response.status}`;
            try {
                const errorData = await response.json();
                errorMessage = errorData.detail || errorData.error || errorMessage;
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorData);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—à–∏–±–∫–∏:', e);
            }
            throw new Error(errorMessage);
        }

        if (progress) progress.style.width = '70%';
        if (uploadStatus) uploadStatus.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö...';

        const result = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ—Ç–∞—Ö —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:', result);

        if (progress) progress.style.width = '100%';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö
        if (uploadStatus) {
            uploadStatus.textContent = '–î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!';
            uploadStatus.className = 'upload-status success';
        }
        
        const fileInfo = result.file_info;
        let successMessage = `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${fileInfo?.flights_count || 0} –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª–µ—Ç–∞—Ö`;
        
        if (fileInfo?.database_updated) {
            successMessage += ' –∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö';
        }
        
        showNotification(successMessage, 'success');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if (result.statistics) {
            console.log('üìä –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª–µ—Ç–æ–≤:', result.statistics);
            showFlightStatistics(result.statistics, result.summary);
        }
        
        setTimeout(() => closeFlightsUploadModal(), 2000);
        
        if (result.statistics) {
            updateStatsAfterFlightUpload(result.statistics);
        }

    } catch (err) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤:', err);
        
        if (progress) progress.style.width = '100%';
        
        if (err.name === 'AbortError') {
            if (uploadStatus) {
                uploadStatus.textContent = '–û—à–∏–±–∫–∞: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (5 –º–∏–Ω—É—Ç)';
            }
            showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ 5 –º–∏–Ω—É—Ç. –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º.', 'warning');
        } else {
            if (uploadStatus) {
                uploadStatus.textContent = '–û—à–∏–±–∫–∞: ' + err.message;
            }
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª: ' + err.message, 'warning');
        }
        
        if (uploadStatus) {
            uploadStatus.className = 'upload-status error';
        }
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkServerStatus() {
    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
        const response = await fetch('/last_map', {
            method: 'GET'
        });
        
        if (response.ok) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω');
            return true;
        } else {
            console.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π:', response.status);
            return false;
        }
    } catch (error) {
        console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
        showNotification('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', 'warning');
        return false;
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
 */
function validateFileSize(file) {
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (file.size > maxSize) {
        showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 100MB', 'warning');
        return false;
    }
    if (file.size === 0) {
        showNotification('–§–∞–π–ª –ø—É—Å—Ç–æ–π', 'warning');
        return false;
    }
    return true;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –æ –ø–æ–ª–µ—Ç–∞—Ö
function showFlightStatistics(statistics, summary) {
    const statsHtml = `
        <div class="statistics-popup">
            <h3><i class="fas fa-chart-bar"></i> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö</h3>
            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-number">${statistics.total_processed || 0}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${statistics.valid_dep_coords || 0}</div>
                    <div class="stat-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã–ª–µ—Ç–∞</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${statistics.valid_dest_coords || 0}</div>
                    <div class="stat-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Å–∞–¥–∫–∏</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${statistics.corrected_coords || 0}</div>
                    <div class="stat-label">–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç</div>
                </div>
            </div>
            <div class="stats-details">
                <p><strong>–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:</strong> ${summary.processing_time || 'N/A'}</p>
                <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${summary.message || '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'}</p>
            </div>
        </div>
    `;
    
    const popup = document.createElement('div');
    popup.className = 'notification stats-notification';
    popup.innerHTML = statsHtml;
    popup.style.background = 'var(--success-color)';
    popup.style.maxWidth = '500px';
    popup.style.zIndex = '1000';
    
    document.body.appendChild(popup);
    
    setTimeout(() => {
        if (popup.parentNode) {
            popup.parentNode.removeChild(popup);
        }
    }, 5000);
}

// –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ–π
function loadLastMap() {
    const mapDiv = document.getElementById('map');
    if (!mapDiv) return;
    
    mapDiv.innerHTML = '<div class="loading"><div class="spinner"></div><span>–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ä—Ç—ã...</span></div>';

    fetch('/last_map')
        .then(response => {
            if (!response.ok) {
                mapDiv.innerHTML = '<div class="welcome-message"><i class="fas fa-map-marked-alt"></i><h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ—Ç–æ–≤ –ë–ü–õ–ê</h3><p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ GeoJSON –∏–ª–∏ Shapefile –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤</p><button class="btn-primary" onclick="openUploadModal()"><i class="fas fa-file-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</button></div>';
                return;
            }
            return response.json();
        })
        .then(plotlyData => {
            if (plotlyData && !plotlyData.error) {
                renderMap(plotlyData);
                showNotification('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞', 'success');
            }
        })
        .catch(err => {
            console.log('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
            mapDiv.innerHTML = '<div class="welcome-message"><i class="fas fa-map-marked-alt"></i><h3>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª–µ—Ç–æ–≤ –ë–ü–õ–ê</h3><p>–ó–∞–≥—Ä—É–∑–∏—Ç–µ GeoJSON –∏–ª–∏ Shapefile –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤</p><button class="btn-primary" onclick="openUploadModal()"><i class="fas fa-file-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</button></div>';
        });
}

/**
 * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –∏–∑ Plotly-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ JSON —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
 */
function renderMap(plotlyData) {
    const mapDiv = document.getElementById('map');
    if (!mapDiv) return;
    
    mapDiv.innerHTML = '<div class="loading"><div class="spinner"></div><span>–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã...</span></div>';

    try {
        // –°–ë–†–ê–°–´–í–ê–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ü–†–ò –ù–û–í–û–ô –ö–ê–†–¢–ï
        originalColors = [];
        selectedRegionIndex = null;
        selectedTraceIndex = null;
        regionIdMapping = {};
        
        originalColors = plotlyData.data.map(trace => trace.fillcolor || '#ccc');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º mapping
        regionIdMapping = {};
        
        plotlyData.data.forEach((trace, index) => {
            trace.hoverinfo = 'text';
            trace.hoveron = 'fills';
            if (!trace.line) trace.line = { color: 'black', width: 1 };
        });

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ layout —Å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–π –ø–æ–¥–ª–æ–∂–∫–æ–π
        const layout = {
            ...plotlyData.layout,
            autosize: true,
            margin: { l: 0, r: 0, b: 0, t: 0, pad: 0 },
            paper_bgcolor: 'rgba(0,0,0,0)',
            plot_bgcolor: 'rgba(0,0,0,0)',
            xaxis: {
                visible: false,
                showgrid: false,
                zeroline: false,
                fixedrange: false,
                range: plotlyData.layout?.xaxis?.range || null
            },
            yaxis: {
                visible: false,
                showgrid: false,
                zeroline: false,
                fixedrange: false,
                scaleanchor: 'x',
                scaleratio: 1,
                range: plotlyData.layout?.yaxis?.range || null
            },
            showlegend: false,
            dragmode: 'pan'
        };

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º zoom –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        const config = {
            displayModeBar: true,
            displaylogo: false,
            modeBarButtonsToRemove: ['select2d', 'lasso2d'],
            modeBarButtonsToAdd: ['zoomIn2d', 'zoomOut2d', 'autoScale2d'],
            scrollZoom: true,
            responsive: true,
            fillFrame: true
        };

        Plotly.newPlot('map', plotlyData.data, layout, config).then(() => {
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞');

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            setTimeout(() => {
                restoreRegionSelection();
            }, 500);
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            setTimeout(() => {
                const graph = document.querySelector('#map .plotly-graph-div');
                if (graph) {
                    graph.style.width = '100%';
                    graph.style.height = '100%';
                }
                
                const svg = document.querySelector('#map .main-svg');
                if (svg) {
                    svg.style.width = '100%';
                    svg.style.height = '100%';
                }
            }, 100);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º mapping —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã
            loadRegionMapping(plotlyData);
            
            enforceDefaultCursor();
            
            const observer = new MutationObserver(() => {
                enforceDefaultCursor();
            });
            observer.observe(document.getElementById('map'), {
                attributes: true,
                subtree: true,
                attributeFilter: ['style', 'class']
            });

            const mapElement = document.getElementById('map');
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
            let currentlySelectedTrace = null;
            
            mapElement.on('plotly_hover', function (eventData) {
                if (!isDragging && eventData.points && eventData.points[0]) {
                    enforceDefaultCursor();
                    const traceIndex = eventData.points[0].curveNumber;
                    
                    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω
                    if (traceIndex !== selectedTraceIndex) {
                        Plotly.restyle('map', {
                            'line.color': 'white',
                            'line.width': 3
                        }, [traceIndex]);
                    }
                }
            });

            mapElement.on('plotly_unhover', function (eventData) {
                if (!isDragging && eventData.points && eventData.points[0]) {
                    enforceDefaultCursor();
                    const traceIndex = eventData.points[0].curveNumber;
                    
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –≤—ã–±—Ä–∞–Ω
                    if (traceIndex !== selectedTraceIndex) {
                        Plotly.restyle('map', {
                            'line.color': 'black',
                            'line.width': 1,
                            'fillcolor': originalColors[traceIndex]
                        }, [traceIndex]);
                    }
                }
            });

            mapElement.on('plotly_click', function (eventData) {
                if (!eventData.points || !eventData.points[0]) return;
                
                enforceDefaultCursor();
                const traceIndex = eventData.points[0].curveNumber;
                const regionName = plotlyData.data[traceIndex].name || '–†–µ–≥–∏–æ–Ω';
                
                // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ mapping
                const regionId = regionIdMapping[traceIndex];
                
                if (regionId === undefined) {
                    console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è: ${regionName}`);
                    showNoMappingInfo(regionName);
                    return;
                }
                
                console.log(`–ö–ª–∏–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É: ${regionName}, traceIndex: ${traceIndex}, regionId: ${regionId}`);
                
                // –ï—Å–ª–∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if (selectedTraceIndex === traceIndex) {
                    resetRegionSelection();
                } else {
                    // –í—ã–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
                    highlightRegionOnMap(traceIndex, regionId, regionName);
                }
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
            mapElement.on('plotly_relayout', function (eventData) {
                enforceDefaultCursor();
            });

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
            mapElement.addEventListener('mousedown', handleDragStart);
            document.addEventListener('mouseup', handleDragEnd);
            document.addEventListener('mousemove', function (e) {
                if (isDragging) {
                    enforceDefaultCursor();
                }
            });

            // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–≥–¥–∞ –∫—É—Ä—Å–æ—Ä –Ω–µ –Ω–∞–¥ –∫–∞—Ä—Ç–æ–π
            mapElement.addEventListener('mouseenter', function() {
                document.body.style.overflow = 'hidden';
            });

            mapElement.addEventListener('mouseleave', function() {
                document.body.style.overflow = 'auto';
            });

        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –∫–∞—Ä—Ç—ã:', err);
            mapDiv.innerHTML = '<div class="loading"><span>–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã: ' + err.message + '</span></div>';
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã:', error);
        mapDiv.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã</div>';
    }
}

/**
 * –í—ã–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –Ω–∞ –∫–∞—Ä—Ç–µ —Å —è—Ä–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–º —Ü–≤–µ—Ç–æ–º
 */
function highlightRegionOnMap(traceIndex, regionId, regionName) {
    console.log(`–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: traceIndex=${traceIndex}, regionId=${regionId}, name=${regionName}`);
    
    // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    if (selectedTraceIndex !== null && selectedTraceIndex !== traceIndex) {
        Plotly.restyle('map', {
            'fillcolor': originalColors[selectedTraceIndex],
            'line.color': 'black',
            'line.width': 1
        }, [selectedTraceIndex]);
        console.log(`–°–Ω—è—Ç–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞: traceIndex=${selectedTraceIndex}`);
    }
    
    // –Ø—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    const highlightColors = {
        fill: '#f8f9faff',    // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π
        line: '#babcbdff',    // –Ø—Ä–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π
        width: 4            // –¢–æ–ª—Å—Ç–∞—è –ª–∏–Ω–∏—è
    };
    
    // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω
    Plotly.restyle('map', {
        'fillcolor': highlightColors.fill,
        'line.color': highlightColors.line,
        'line.width': highlightColors.width
    }, [traceIndex]);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
    selectedRegionIndex = regionId;
    selectedTraceIndex = traceIndex; // –°–æ—Ö—Ä–∞–Ω—è–µ–º traceIndex
    
    console.log(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–∏–µ: traceIndex=${traceIndex}, regionId=${regionId}`);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
    loadRegionMetrics(regionId, regionName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    updateSearchInput(regionName);
    
    showNotification(`–í—ã–±—Ä–∞–Ω —Ä–µ–≥–∏–æ–Ω: ${regionName}`);
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞
 */
function updateSearchInput(regionName) {
    const searchInput = document.getElementById('regionSearch');
    if (searchInput) {
        searchInput.value = regionName;
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç mapping –º–µ–∂–¥—É –∏–Ω–¥–µ–∫—Å–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç–µ –∏ ID —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –±–∞–∑–µ
async function loadRegionMapping(plotlyData) {
    try {
        const response = await fetch('/debug/regions');
        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mapping —Ä–µ–≥–∏–æ–Ω–æ–≤');
            return;
        }
        
        const debugInfo = await response.json();
        const dbRegions = debugInfo.database_regions || [];
        
        console.log('–†–µ–≥–∏–æ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', dbRegions);
        console.log('–†–µ–≥–∏–æ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ:', plotlyData.data.map((trace, index) => ({ index, name: trace.name })));
        
        // –°–æ–∑–¥–∞–µ–º mapping: –∏—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω —Ä–µ–≥–∏–æ–Ω–æ–≤
        plotlyData.data.forEach((trace, traceIndex) => {
            const regionName = trace.name;
            
            // 1. –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            let dbRegion = dbRegions.find(region => region.name === regionName);
            if (dbRegion) {
                regionIdMapping[traceIndex] = dbRegion.id;
                console.log(`‚úÖ Exact match: ${regionName} -> ${dbRegion.name} (ID: ${dbRegion.id})`);
                return;
            }
            
            // 2. –ü—Ä—è–º–æ–µ mapping –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è–º
            dbRegion = findDirectRegionMapping(regionName, dbRegions);
            if (dbRegion) {
                regionIdMapping[traceIndex] = dbRegion.id;
                console.log(`‚úÖ Direct mapping: ${regionName} -> ${dbRegion.name} (ID: ${dbRegion.id})`);
                return;
            }
            
            // 3. –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const normalizedMapName = normalizeRegionName(regionName);
            
            // –ò—â–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
            dbRegion = dbRegions.find(region => {
                if (!region.name) return false;
                const normalizedDbName = normalizeRegionName(region.name);
                return normalizedMapName === normalizedDbName;
            });
            
            if (dbRegion) {
                regionIdMapping[traceIndex] = dbRegion.id;
                console.log(`‚úÖ Normalized match: ${regionName} -> ${dbRegion.name} (ID: ${dbRegion.id})`);
                return;
            }
            
            // 4. –ü–æ–∏—Å–∫ –ø–æ —Å–∏–Ω–æ–Ω–∏–º–∞–º
            dbRegion = findRegionBySynonyms(regionName, dbRegions);
            if (dbRegion) {
                regionIdMapping[traceIndex] = dbRegion.id;
                console.log(`‚úÖ Synonym match: ${regionName} -> ${dbRegion.name} (ID: ${dbRegion.id})`);
                return;
            }
            
            console.warn(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω mapping –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞: ${regionName} (traceIndex: ${traceIndex})`);
        });
        
        console.log('Final region mapping:', regionIdMapping);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ mapping —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è mapping —Ä–µ–≥–∏–æ–Ω–æ–≤
function normalizeRegionName(name) {
    if (!name) return '';
    
    return name
        .toLowerCase()
        .replace(/—ë/g, '–µ')
        .replace(/[^a-z–∞-—è0-9]/g, '')
        .replace(/—Ä–µ—Å–ø—É–±–ª–∏–∫–∞/g, '')
        .replace(/–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π/g, '')
        .replace(/–æ–∫—Ä—É–≥/g, '')
        .replace(/–æ–±–ª–∞—Å—Ç—å/g, '')
        .replace(/–∫—Ä–∞–π/g, '')
        .replace(/–∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è/g, '')
        .replace(/‚Äî/g, '')
        .replace(/-/g, '')
        .trim();
}

function findRegionBySynonyms(mapName, dbRegions) {
    const synonymMap = {
        '—É–¥–º—É—Ä—Ç—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '—É–¥–º—É—Ä—Ç–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—É–¥–º—É—Ä—Ç–∏—è': '—É–¥–º—É—Ä—Ç–∏—è',
        '—á—É–≤–∞—à—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '—á—É–≤–∞—à–∏—è', 
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—á—É–≤–∞—à–∏—è': '—á—É–≤–∞—à–∏—è',
        '–∫–∞—Ä–∞—á–∞–µ–≤–æ—á–µ—Ä–∫–µ—Å—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '–∫–∞—Ä–∞—á–∞–µ–≤–æ—á–µ—Ä–∫–µ—Å–∏—è',
        '–∫–∞–±–∞—Ä–¥–∏–Ω–æ–±–∞–ª–∫–∞—Ä—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '–∫–∞–±–∞—Ä–¥–∏–Ω–æ–±–∞–ª–∫–∞—Ä–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—Å–µ–≤–µ—Ä–Ω–∞—è–æ—Å–µ—Ç–∏—è–∞–ª–∞–Ω–∏—è': '—Å–µ–≤–µ—Ä–Ω–∞—è–æ—Å–µ—Ç–∏—è–∞–ª–∞–Ω–∏—è',
        '—á–µ—á–µ–Ω—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞': '—á–µ—á–µ–Ω—Å–∫–∞—è—Ä–µ—Å–ø—É–±–ª–∏–∫–∞',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–¥–∞–≥–µ—Å—Ç–∞–Ω': '–¥–∞–≥–µ—Å—Ç–∞–Ω',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—Ç–∞—Ç–∞—Ä—Å—Ç–∞–Ω': '—Ç–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–±–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': '–±–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–º–∞—Ä–∏–π—ç–ª': '–º–∞—Ä–∏–π—ç–ª',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–º–æ—Ä–¥–æ–≤–∏—è': '–º–æ—Ä–¥–æ–≤–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∫–∞–ª–º—ã–∫–∏—è': '–∫–∞–ª–º—ã–∫–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∫–∞—Ä–µ–ª–∏—è': '–∫–∞—Ä–µ–ª–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∫–æ–º–∏': '–∫–æ–º–∏',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—Ö–∞–∫–∞—Å–∏—è': '—Ö–∞–∫–∞—Å–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–±—É—Ä—è—Ç–∏—è': '–±—É—Ä—è—Ç–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—Ç—ã–≤–∞': '—Ç—ã–≤–∞',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∞–¥—ã–≥–µ—è': '–∞–¥—ã–≥–µ—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∞–ª—Ç–∞–π': '–∞–ª—Ç–∞–π',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞—Å–∞—Ö–∞—è–∫—É—Ç–∏—è': '—Å–∞—Ö–∞—è–∫—É—Ç–∏—è',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∫—Ä—ã–º': '–∫—Ä—ã–º',
        '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞–∏–Ω–≥—É—à–µ—Ç–∏—è': '–∏–Ω–≥—É—à–µ—Ç–∏—è'
    };
    
    const normalizedMapName = normalizeRegionName(mapName);
    const synonym = synonymMap[normalizedMapName];
    
    if (synonym) {
        return dbRegions.find(region => {
            if (!region.name) return false;
            const normalizedDbName = normalizeRegionName(region.name);
            return normalizedDbName.includes(synonym) || synonym.includes(normalizedDbName);
        });
    }
    
    return null;
}

function findDirectRegionMapping(mapName, dbRegions) {
    const directMapping = {
        '–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': '–£–¥–º—É—Ä—Ç–∏—è',
        '–£–¥–º—É—Ä—Ç—Å–∫–∞—è–†–µ—Å–ø—É–±–ª–∏–∫–∞': '–£–¥–º—É—Ä—Ç–∏—è',
        '–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': '–ß—É–≤–∞—à–∏—è', 
        '–ß—É–≤–∞—à—Å–∫–∞—è–†–µ—Å–ø—É–±–ª–∏–∫–∞': '–ß—É–≤–∞—à–∏—è',
        '–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': '–ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è',
        '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': '–ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è ‚Äî –ê–ª–∞–Ω–∏—è': '–°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è - –ê–ª–∞–Ω–∏—è',
        '–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': '–ß–µ—á–µ–Ω—Å–∫–∞—è —Ä–µ—Å–ø—É–±–ª–∏–∫–∞',
        '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ ‚Äî –Æ–≥—Ä–∞': '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥ - –Æ–≥—Ä–∞',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è': '–ë—É—Ä—è—Ç–∏—è',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞': '–¢—ã–≤–∞',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': '–ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è': '–ö–∞–ª–º—ã–∫–∏—è',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': '–¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω': '–î–∞–≥–µ—Å—Ç–∞–Ω',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º': '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è': '–ú–æ—Ä–¥–æ–≤–∏—è',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª': '–ú–∞—Ä–∏–π –≠–ª',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è': '–ê–¥—ã–≥–µ—è',
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è': '–ò–Ω–≥—É—à–µ—Ç–∏—è'
    };
    
    if (directMapping[mapName]) {
        return dbRegions.find(region => region.name === directMapping[mapName]);
    }
    
    const nameWithoutSpaces = mapName.replace(/\s/g, '');
    if (directMapping[nameWithoutSpaces]) {
        return dbRegions.find(region => region.name === directMapping[nameWithoutSpaces]);
    }
    
    return null;
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ mapping'–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
function showNoMappingInfo(regionName) {
    const infoDiv = document.getElementById('info');
    if (!infoDiv) return;
    
    infoDiv.innerHTML = `
        <h3 class="info-title"><i class="fas fa-info-circle"></i> ${regionName}</h3>
        <div class="info-content">
            <div class="metric-card" style="background: var(--accent-color);">
                <h3><i class="fas fa-map-marker-alt"></i></h3>
                <p>–†–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ</p>
            </div>
            <div class="info-section">
                <h4><i class="fas fa-exclamation-triangle"></i> –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º</h4>
                <p>–†–µ–≥–∏–æ–Ω <strong>"${regionName}"</strong> –µ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.</p>
            </div>
        </div>
    `;
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
 */
async function loadRegionMetrics(regionId, regionName) {
    try {
        const response = await fetch(`/metrics/region/${regionId}`);
        
        if (!response.ok) {
            if (response.status === 404) {
                showNoDataInfo(regionName);
            } else {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return;
        }
        
        const metrics = await response.json();
        
        if (!metrics || metrics.flight_count === 0) {
            showNoDataInfo(regionName);
        } else {
            updateRegionInfo(metrics, regionName);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫ —Ä–µ–≥–∏–æ–Ω–∞:', error);
        showNoDataInfo(regionName);
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
function showNoDataInfo(regionName) {
    const infoDiv = document.getElementById('info');
    if (!infoDiv) return;
    
    infoDiv.innerHTML = `
        <h3 class="info-title"><i class="fas fa-info-circle"></i> ${regionName}</h3>
        <div class="info-content">
            <div class="metric-card" style="background: var(--warning-color);">
                <h3><i class="fas fa-database"></i></h3>
                <p>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            </div>
            <div class="info-section">
                <h4><i class="fas fa-exclamation-triangle"></i> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <p>–î–ª—è —Ä–µ–≥–∏–æ–Ω–∞ <strong>"${regionName}"</strong> –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª–µ—Ç–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.</p>
            </div>
        </div>
    `;
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
 */
function resetRegionSelection() {
    console.log('üîÑ –°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞', { 
        selectedTraceIndex, 
        selectedRegionIndex,
        originalColorsLength: originalColors.length 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if (selectedTraceIndex !== null && selectedTraceIndex >= 0) {
        console.log(`–°–±—Ä–æ—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: traceIndex=${selectedTraceIndex}`);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞
        if (originalColors[selectedTraceIndex]) {
            console.log(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è traceIndex ${selectedTraceIndex}:`, originalColors[selectedTraceIndex]);
            
            Plotly.restyle('map', {
                'fillcolor': originalColors[selectedTraceIndex],
                'line.color': 'black',
                'line.width': 1
            }, [selectedTraceIndex]).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–≤–µ—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞:', err);
            });
        } else {
            console.warn(`–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è traceIndex ${selectedTraceIndex}`);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ü–≤–µ—Ç
            Plotly.restyle('map', {
                'fillcolor': '#cccccc',
                'line.color': 'black', 
                'line.width': 1
            }, [selectedTraceIndex]).catch(err => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ fallback —Ü–≤–µ—Ç–∞:', err);
            });
        }
    } else {
        console.log('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞');
    }
    
    // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –¥–∞–∂–µ –µ—Å–ª–∏ selectedTraceIndex –±—ã–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
    selectedRegionIndex = null;
    selectedTraceIndex = null;
    
    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const searchInput = document.getElementById('regionSearch');
    if (searchInput) {
        searchInput.value = '';
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ–∫—É—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        searchInput.blur();
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const infoDiv = document.getElementById('info');
    if (infoDiv) {
        infoDiv.innerHTML = `
            <div class="info-content">
                <div class="welcome-region-message">
                    <i class="fas fa-map-marker-alt"></i>
                    <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</h3>
                    <p>–Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª–µ—Ç–∞—Ö</p>
                </div>
            </div>
        `;
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–∏—Å–∫–∞
    hideSuggestions();
    
    showNotification('–í—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ —Å–±—Ä–æ—à–µ–Ω–æ');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã
    setTimeout(() => {
        enforceDefaultCursor();
    }, 100);
}

/**
 * –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã
 */
function restoreRegionSelection() {
    if (selectedTraceIndex !== null && selectedRegionIndex !== null) {
        console.log('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏');
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–º—è —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ ID
        let regionName = '–†–µ–≥–∏–æ–Ω';
        for (const [traceIdx, regionId] of Object.entries(regionIdMapping)) {
            if (regionId === selectedRegionIndex) {
                const regionElement = document.querySelector(`[data-region-id="${regionId}"]`);
                regionName = regionElement?.dataset?.regionName || '–†–µ–≥–∏–æ–Ω';
                break;
            }
        }
        
        // –í—ã–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω —Å–Ω–æ–≤–∞
        highlightRegionOnMap(selectedTraceIndex, selectedRegionIndex, regionName);
    }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤ —Å—Ç–∏–ª—å–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
 */
function updateRegionInfo(metrics, regionName) {
    const infoDiv = document.getElementById('info');
    if (!infoDiv) return;
    
    const timeDistribution = metrics.time_distribution || {
        morning: 0, day: 0, evening: 0, night: 0
    };
    
    const totalTimeFlights = timeDistribution.morning + timeDistribution.day + 
                           timeDistribution.evening + timeDistribution.night;
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    let timeChartHtml = '';
    if (totalTimeFlights > 0) {
        const timeData = [
            { period: '–£—Ç—Ä–æ', value: timeDistribution.morning, color: '#3498db', icon: 'üåÖ' },
            { period: '–î–µ–Ω—å', value: timeDistribution.day, color: '#f39c12', icon: '‚òÄÔ∏è' },
            { period: '–í–µ—á–µ—Ä', value: timeDistribution.evening, color: '#e74c3c', icon: 'üåá' },
            { period: '–ù–æ—á—å', value: timeDistribution.night, color: '#2c3e50', icon: 'üåô' }
        ];
        
        timeChartHtml = `
            <div class="time-chart-section">
                <h4><i class="fas fa-chart-pie"></i> –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫</h4>
                <div class="time-chart-container">
                    <div class="time-chart">
                        ${timeData.map(item => `
                            <div class="time-chart-item" style="--percentage: ${(item.value / totalTimeFlights) * 100}%; --color: ${item.color}">
                                <div class="time-chart-segment">
                                    <span class="time-icon">${item.icon}</span>
                                </div>
                                <div class="time-chart-info">
                                    <span class="time-period">${item.period}</span>
                                    <span class="time-value">${item.value} –ø–æ–ª–µ—Ç–æ–≤</span>
                                    <span class="time-percentage">${Math.round((item.value / totalTimeFlights) * 100)}%</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤
    const flightDensity = metrics.flight_density || 0;
    const formattedDensity = flightDensity % 1 === 0 ? flightDensity : flightDensity.toFixed(3);

    infoDiv.innerHTML = `
        <div class="region-header">
            <div class="region-title">
                <i class="fas fa-map-marker-alt"></i>
                <h3>${regionName}</h3>
            </div>
            <button class="btn-close" onclick="resetRegionSelection()" title="–°–±—Ä–æ—Å–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ">
                <i class="fas fa-times"></i>
            </button>
        </div>
        
        <div class="region-content">
            <!-- –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ -->
            <div class="main-metric-card">
                <div class="metric-icon">
                    <i class="fas fa-plane"></i>
                </div>
                <div class="metric-content">
                    <div class="metric-value">${(metrics.flight_count || 0).toLocaleString()}</div>
                    <div class="metric-label">–í—Å–µ–≥–æ –ø–æ–ª–µ—Ç–æ–≤</div>
                    <div class="metric-trend">
                        <i class="fas fa-chart-line"></i>
                        <span>–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–≥–∏–æ–Ω–∞</span>
                    </div>
                </div>
            </div>

            <!-- –ì—Ä—É–ø–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ -->
            <div class="metrics-group">
                <h4 class="metrics-group-title">
                    <i class="fas fa-chart-bar"></i>
                    –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                </h4>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #3498db, #2980b9)">
                            <i class="fas fa-plane-departure"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${metrics.avg_daily_flights || 0}</div>
                            <div class="metric-card-label">–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å</div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #2ecc71, #27ae60)">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${metrics.median_daily_flights || 0}</div>
                            <div class="metric-card-label">–ú–µ–¥–∏–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ—Ç–æ–≤ –≤ –¥–µ–Ω—å</div>
                        </div>
                    </div>
                    
                </div>
            </div>

            <!-- –ì—Ä—É–ø–ø–∞ 2: –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ -->
            <div class="metrics-group">
                <h4 class="metrics-group-title">
                    <i class="fas fa-clock"></i>
                    –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                </h4>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #e74c3c, #c0392b)">
                            <i class="fas fa-hourglass-half"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${metrics.avg_duration_minutes || 0} –º–∏–Ω</div>
                            <div class="metric-card-label">–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–∞</div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #f39c12, #d35400)">
                            <i class="fas fa-tachometer-alt"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${metrics.peak_load_per_hour || 0}</div>
                            <div class="metric-card-label">–ü–∏–∫–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (–ø–æ–ª–µ—Ç–æ–≤ –≤ —á–∞—Å)</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –ì—Ä—É–ø–ø–∞ 3: –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ -->
            <div class="metrics-group">
                <h4 class="metrics-group-title">
                    <i class="fas fa-map"></i>
                    –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                </h4>
                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #9b59b6, #8e44ad)">
                            <i class="fas fa-map-marker-alt"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${formattedDensity}</div>
                            <div class="metric-card-label">–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –ø–æ–ª–µ—Ç–æ–≤</div>
                            <div class="metric-card-subtext">–Ω–∞ 1000 –∫–º¬≤</div>
                        </div>
                    </div>
                    
                    <div class="metric-card">
                        <div class="metric-card-icon" style="background: linear-gradient(135deg, #1abc9c, #16a085)">
                            <i class="fas fa-expand-arrows-alt"></i>
                        </div>
                        <div class="metric-card-content">
                            <div class="metric-card-value">${Math.round((metrics.total_duration_minutes || 0) / 60)} —á</div>
                            <div class="metric-card-label">–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ª–µ—Ç–∞</div>
                            <div class="metric-card-subtext">–≤—Å–µ—Ö –ø–æ–ª–µ—Ç–æ–≤</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ -->
            ${timeChartHtml}

            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
            <div class="info-footer">
                <div class="last-update">
                    <i class="fas fa-history"></i>
                    –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleDateString('ru-RU')}
                </div>
            </div>

        </div>
    `;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function enforceDefaultCursor() {
    const mapDiv = document.getElementById('map');
    if (mapDiv) {
        mapDiv.style.cursor = 'default';
        const elements = mapDiv.querySelectorAll('*');
        elements.forEach(el => {
            el.style.cursor = 'default';
        });
    }
}

function handleDragStart() {
    isDragging = true;
    initialPan = {
        x: window.scrollX,
        y: window.scrollY
    };
}

function handleDragEnd() {
    isDragging = false;
}

function showNotification(message, type = 'success') {
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 15px 20px;
        background: ${type === 'success' ? 'var(--success-color)' : type === 'warning' ? 'var(--warning-color)' : 'var(--accent-color)'};
        color: white;
        border-radius: 5px;
        z-index: 10000;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    `;
    notification.textContent = message;
    document.body.appendChild(notification);
    setTimeout(() => {
        notification.remove();
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
function loadMapIfNeeded() {
    const mapDiv = document.getElementById('map');
    if (!mapDiv) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –∏–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (mapDiv.querySelector('.welcome-message') || 
        mapDiv.innerHTML.includes('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã') ||
        !mapDiv.querySelector('.plotly-graph-div')) {
        loadLastMap();
    }
}

function updateStatsAfterFlightUpload(statistics) {
    if (statistics && statistics.total_processed) {
        showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        setTimeout(() => {
            loadOverallStats();
        }, 1000);
    }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –¥–µ–π—Å—Ç–≤–∏–π
function downloadRegionReport(regionId) {
    showNotification('–§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

function showRegionTrends(regionId) {
    showNotification('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
document.addEventListener('DOMContentLoaded', async function () {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    const serverAvailable = await checkServerStatus();
    
    if (serverAvailable) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const urlHash = window.location.hash.replace('#', '');
        let initialSection = 'analytics';

        if (urlHash === 'overview' || urlHash === 'analytics') {
            initialSection = urlHash;
        } else {
            const saved = localStorage.getItem('currentSection');
            if (saved === 'overview' || saved === 'analytics') {
                initialSection = saved;
            }
        }

        showSection(initialSection);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        loadOverallStats();
        initFileUpload(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã
        initFlightsFileUpload(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–µ—Ç–æ–≤
        initSearch();
        initMetricFilter();
        
        console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—É —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            loadMapIfNeeded();
        }, 100);
        
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const mapDiv = document.getElementById('map');
        if (mapDiv) {
            mapDiv.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</p>
                    <ul>
                        <li>–ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä FastAPI</li>
                        <li>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</li>
                        <li>–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</li>
                    </ul>
                    <button class="btn-primary" onclick="location.reload()">
                        <i class="fas fa-redo"></i> –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
            `;
        }
    }
});